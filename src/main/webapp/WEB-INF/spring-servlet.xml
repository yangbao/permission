<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

     <!-- 放到applicationContext.xml里了 -->
   <!-- 它的作用是隐式的向Spring容器注册
    AutowiredAnnotationBeanPostProcessor, CommonAnnotationBeanPostProcessor,PersistenceAnnotationBeanPostProcessor,    RequiredAnnotationBeanPostProcessor
    这4个BeanPostProcessor.注册这4个bean处理器主要的作用是为了你的系统能够识别相应的注解-->
    <context:annotation-config />
    <!-- 启动注解驱动的spring mvc 功能
     主要说明里面的两个，RequestMappingHandlerMapping和RequestMappingHandlerAdapter。
     第一个是HandlerMapping的实现类，它会处理@RequestMapping 注解，并将其注册到请求映射表中。
     第二个是HandlerAdapter的实现类，它是处理请求的适配器，说白了，就是确定调用哪个类的哪个方法，并且构造方法参数，返回值。
     <context:component-scan/>向容器中显式或隐式注册了一系列单个组件，但是项目要想将组件关联起来正常运转，则需要<mvc:annotation-driven/>注册的组件完成。
     比如请求一个URL，我要知道这个URL匹配哪个controller中的哪个方法。哪个Controller就需要<context:component-scan/>注解，如何匹配，匹配哪个方法就需要<mvc:annotation-driven/>注解。
     -->
    <mvc:annotation-driven/>
    <!--  请求前后的拦截器  -->
    <mvc:interceptors>
        <bean class="com.mmall.common.HttpInterceptor" />
    </mvc:interceptors>

    <!-- 启动包扫描功能, 只扫描Controller和service -->
    <context:component-scan base-package="com.mmall.controller" />
    <!-- 放到applicationContext.xml里了 -->
    <context:component-scan base-package="com.mmall.service" />
    <!--获取applicationContext的bean, 不能懒加载-->
    <bean class="com.mmall.common.ApplicationContextHelper" lazy-init="false"/>
<!--    <mvc:resources location="/js/" mapping="/js/**"/>-->
<!--    <mvc:resources location="/css/" mapping="/css/**"/>-->
<!--    <mvc:resources location="/bootstrap3.3.5/" mapping="/bootstrap3.3.5/**"/>-->
<!--    <mvc:resources location="/assets/" mapping="/assets/**"/>-->
<!--    <mvc:resources location="/ztree/" mapping="/ztree/**"/>-->
    <!-- 放到applicationContext.xml里了 -->
<!--    <bean class="com.mmall.common.ApplicationContextHelper" lazy-init="false" />-->
    <!--通过request查找对应的HandlerMethod，即当前request具体是由Controller中的哪个方法进行处理；
        查找当前系统中的Interceptor，将其与HandlerMethod封装为一个HandlerExecutionChain。-->
<!--    <bean class="org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping" />-->
<!--    全局异常-->
    <bean class="com.mmall.common.SpringExceptionResolver" />
<!--    返回数据的格式, jsp,json,pdf还是其他-->
    <bean class="org.springframework.web.servlet.view.BeanNameViewResolver" />
<!--    针对json进行的配置-->
    <bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />
<!-- 针对jsp页面的处理-->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix" value="/WEB-INF/views/" />
        <property name="suffix" value=".jsp" />
    </bean>

</beans>